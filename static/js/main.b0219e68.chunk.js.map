{"version":3,"sources":["colors.ts","api/problem.ts","components/Frontpage.tsx","components/ProblemView.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["colors","app","initializeApp","firebaseConfig","db","getFirestore","listProblems","a","getDocs","collection","querySnapshot","docs","doc","push","id","data","getProblem","getDoc","docSnap","exists","console","log","CreateForm","useState","title","setTitle","description","setDescription","style","marginBottom","className","onSubmit","e","preventDefault","alert","display","flexDirection","alignItems","color","value","onChange","target","marginTop","alignSelf","fontSize","padding","Frontpage","undefined","problems","setProblems","showCreateForm","setShowCreateForm","getProblems","useEffect","fontWeight","onClick","map","problem","marginRight","background","width","height","justifyContent","borderRadius","boxShadow","flexShrink","paddingLeft","upvotes","paddingRight","to","lineHeight","maxHeight","overflow","position","top","left","right","Solution","solution","flex","ProblemView","problemId","useParams","solutions","setSolutions","setProblem","getSetProblem","setTimeout","backgroundColor","App","margin","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kjBAAaA,EAEL,UAFKA,EAGL,U,+BCAFC,EAAMC,YAAcC,GACpBC,EAAKC,YAAaJ,GAUjB,SAAeK,IAAtB,+B,4CAAO,oCAAAC,EAAA,sEACuBC,YAAQC,YAAWL,EAAI,aAD9C,OACCM,EADD,OAECC,EAAO,GAFR,cAGaD,EAAcC,MAH3B,IAGL,2BAAWC,EAA2B,QACpCD,EAAKE,KAAK,CACRC,GAAIF,EAAIE,GACRC,KAAMH,EAAIG,SANT,uDASEJ,GATF,4C,sBAYA,SAAeK,EAAtB,kC,4CAAO,WAA0BF,GAA1B,eAAAP,EAAA,sEACiBU,YAAOL,YAAIR,EAAI,WAAYU,IAD5C,YACCI,EADD,QAGOC,SAHP,uBAIHC,QAAQC,IAAI,iBAAkBH,EAAQH,QAJnC,kBAKI,CACLD,KACAC,KAAMG,EAAQH,SAPb,OAWHK,QAAQC,IAAI,qBAXT,4C,iCCpBDC,EAAuB,WAAO,IAAD,EACPC,mBAAS,IADF,mBAC1BC,EAD0B,KACnBC,EADmB,OAEKF,mBAAS,IAFd,mBAE1BG,EAF0B,KAEbC,EAFa,KAGjC,OACE,qBAAKC,MAAO,CAAEC,aAAc,IAA5B,SACE,uBACEC,UAAU,cACVC,SAAU,SAACC,GAGT,OAFAA,EAAEC,iBACFC,MAAMV,IACC,GALX,UAQE,wBACEI,MAAO,CACLO,QAAS,OACTC,cAAe,SACfC,WAAY,WAJhB,UAOE,qBACET,MAAO,CACLC,aAAc,EACdS,MAAO,SAHX,mBAQA,uBACEC,MAAOf,EACPgB,SAAU,SAACR,GAAD,OAAOP,EAASO,EAAES,OAAOF,QACnCX,MAAO,CAAEC,aAAc,SAG3B,wBACED,MAAO,CACLO,QAAS,OACTC,cAAe,SACfC,WAAY,WAJhB,UAOE,qBACET,MAAO,CACLC,aAAc,EACda,UAAW,EACXJ,MAAO,SAJX,yBASA,0BACEC,MAAOb,EACPc,SAAU,SAACR,GAAD,OAAOL,EAAeK,EAAES,OAAOF,QACzCX,MAAO,CAAEC,aAAc,SAG3B,wBACED,MAAO,CACLe,UAAW,WACXC,SAAU,GACVf,aAAc,GACdgB,QAAS,WACTH,UAAW,GANf,0BAgBKI,EAAY,WAAO,IAAD,EACGvB,wBAAgCwB,GADnC,mBACtBC,EADsB,KACZC,EADY,OAEe1B,oBAAS,GAFxB,mBAEtB2B,EAFsB,KAENC,EAFM,KAIvBC,EAAW,uCAAG,4BAAA7C,EAAA,sEACKD,IADL,OACZ0C,EADY,OAElBC,EAAYD,GAFM,2CAAH,qDASjB,OAJAK,qBAAU,WACRD,MACC,IAGD,sBAAKtB,UAAU,kBAAf,UACE,qBAAKF,MAAO,CAAEgB,SAAU,GAAIf,aAAc,GAAIyB,WAAY,KAA1D,wBAIA,qBAAK1B,MAAO,CAAEC,aAAc,GAAIyB,WAAY,KAA5C,SACE,8DAGAJ,GACA,wBACEpB,UAAU,MACVF,MAAO,CAAEgB,SAAU,GAAIC,QAAS,WAAYhB,aAAc,IAC1D0B,QAAS,SAACvB,GACRA,EAAEC,iBACFkB,GAAkB,IALtB,iCAYDD,GAAkB,cAAC,EAAD,IAEnB,8BACGF,GACCA,EAASQ,KAAI,SAACC,GAAD,OACX,sBACE7B,MAAO,CACLC,aAAc,IAFlB,UAKE,sBACED,MAAO,CACLO,QAAS,OACTE,WAAY,SACZR,aAAc,IAJlB,UAOE,qBACED,MAAO,CACL8B,YAAa,GACbC,WAAY3D,EACZ4D,MAAO,GACPC,OAAQ,GACR1B,QAAS,OACTE,WAAY,SACZyB,eAAgB,SAChBC,aAAc,GACdC,UAAW,aAAehE,EAC1BiE,WAAY,GAXhB,SAcE,sBAAKrC,MAAO,CAAEsC,YAAa,GAA3B,UAAiCT,EAAQ1C,KAAKoD,QAA9C,eAEF,qBACEvC,MAAO,CACLgB,SAAU,GACVwB,aAAc,IAHlB,SAME,cAAC,IAAD,CAAMtC,UAAU,aAAauC,GAAI,aAAeZ,EAAQ3C,GAAxD,SACG2C,EAAQ1C,KAAKS,aAIpB,sBACEI,MAAO,CACLsC,YAAa,GACbE,aAAc,GACd9B,MAAO,OACPgC,WAAY,IACZC,UAAW,IACXC,SAAU,SACVC,SAAU,YARd,UAWE,qBACE7C,MAAO,CACL6C,SAAU,WACVC,IAAK,GACLf,WACE,0EACFgB,KAAM,EACNC,MAAO,EACPf,OAAQ,MAGXJ,EAAQ1C,KAAKW,2BCpKxBmD,EAAW,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,SACjB,OACE,sBAAKlD,MAAO,CAACc,UAAW,EAAGP,QAAS,OAAQ4C,KAAM,EAAG3C,cAAe,MAAOC,WAAY,UAAvF,UACE,sBAAKT,MAAO,CAAC8B,YAAa,IAA1B,UACE,gDAAe,+BAAOoB,EAASX,aAEjC,gCACE,6BAAKW,EAAStD,QACd,4BAAIsD,EAASpD,qBAKRsD,EAAc,WAAO,IACzBC,EAAaC,cAAbD,UADwB,EAGG1D,wBAA0CwB,GAH7C,mBAGxBoC,EAHwB,KAGbC,EAHa,OAID7D,wBAA8BwB,GAJ7B,mBAIxBU,EAJwB,KAIf4B,EAJe,KAsBzBC,EAAa,uCAAG,WAAOL,GAAP,eAAA1E,EAAA,sEACES,EAAWiE,GADb,OACdxB,EADc,OAEpB4B,EAAW5B,GAFS,2CAAH,sDAkBnB,OAbAJ,qBAAU,WACRiC,EAAcL,KACb,CAACA,IAEJ5B,qBAAU,WACJ4B,GAEFM,YAAW,WA1BbH,EAAa,CACX,CACE5D,MAAO,+BACPE,YAAa,gIACbyC,QAAS,MAEX,CACE3C,MAAO,gBACPE,YAAa,4EACbyC,SAAU,QAmBR,OAEL,CAACc,IAECxB,EASD,sBAAK3B,UAAU,kBAAf,UACE,sBAAKF,MAAO,CAACO,QAAS,OAAQ4C,KAAM,EAAG3C,cAAe,MAAOC,WAAY,UAAzE,UACE,sBAAKT,MAAO,CAAC8B,YAAa,GAAI8B,gBAAiBxF,EAAa+D,aAAc,GAAIlB,QAAS,GAAIV,QAAS,OAAQC,cAAe,OAA3H,UACE,gDAAe,+BAAOqB,EAAQ1C,KAAKoD,aAErC,gCACE,6BAAKV,EAAQ1C,KAAKS,QAClB,4BAAIiC,EAAQ1C,KAAKW,oBAIpByD,GACC,sBAAKvD,MAAO,CAACc,UAAW,IAAxB,UACE,2CACCyC,EAAU3B,KAAI,SAAAsB,GAAQ,OACrB,cAAC,EAAD,CAAUA,SAAUA,aAtB5B,sBAAKhD,UAAU,kBAAf,UACE,4CACA,gDCvCO2D,MA7Bf,WACE,OACE,cAAC,IAAD,UACE,sBAAK3D,UAAU,iBAAf,UACE,qBACEF,MAAO,CACLO,QAAS,OACTuD,OAAQ,IAHZ,SAME,8BACE,cAAC,IAAD,CAAMrB,GAAG,IAAIvC,UAAU,cAAvB,sBAKJ,eAAC,IAAD,WACE,cAAC,IAAD,CAAO6D,KAAK,IAAIC,OAAO,EAAvB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,KAAK,sBAAsBC,OAAO,EAAzC,SACE,cAAC,EAAD,eCZGC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b0219e68.chunk.js","sourcesContent":["export const colors = {\n  pink: \"#f2aeb1\",\n  gold: \"#faeec8\",\n  jade: \"#4b806d\",\n};\n","import { getFirestore, collection, addDoc, doc, getDoc, getDocs } from \"firebase/firestore/lite\";\nimport { initializeApp } from \"firebase/app\";\nimport firebaseConfig from \"../secrets.json\";\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\n\nexport async function createProblem(title: string, description : string) {\n    await addDoc(collection(db, \"problems\"), {\n      title: title,\n      description: description,\n      upvotes: 0,\n    });\n}\n\nexport async function listProblems() {\n  const querySnapshot = await getDocs(collection(db, \"problems\"));\n  const docs = [];\n  for (const doc of querySnapshot.docs) {\n    docs.push({\n      id: doc.id,\n      data: doc.data(),\n    })\n  }\n  return docs;\n}\n\nexport async function getProblem(id: string) {\n  const docSnap = await getDoc(doc(db, \"problems\", id));\n\n  if (docSnap.exists()) {\n    console.log(\"Document data:\", docSnap.data());\n    return {\n      id,\n      data: docSnap.data(),\n    }\n  } else {\n    // doc.data() will be undefined in this case\n    console.log(\"No such document!\");\n  }\n}\n","import { Link } from \"react-router-dom\";\nimport React, { useEffect, useState } from \"react\";\nimport { colors } from \"../colors\";\nimport { Problem } from \"./ProblemView\";\nimport { listProblems } from \"../api/problem\";\n\nconst CreateForm: React.FC = () => {\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  return (\n    <div style={{ marginBottom: 64 }}>\n      <form\n        className=\"create-form\"\n        onSubmit={(e) => {\n          e.preventDefault();\n          alert(title);\n          return false;\n        }}\n      >\n        <label\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"stretch\",\n          }}\n        >\n          <div\n            style={{\n              marginBottom: 8,\n              color: \"white\",\n            }}\n          >\n            Title\n          </div>\n          <input\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            style={{ marginBottom: 16 }}\n          />\n        </label>\n        <label\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"stretch\",\n          }}\n        >\n          <div\n            style={{\n              marginBottom: 8,\n              marginTop: 8,\n              color: \"white\",\n            }}\n          >\n            Description\n          </div>\n          <textarea\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            style={{ marginBottom: 16 }}\n          />\n        </label>\n        <button\n          style={{\n            alignSelf: \"flex-end\",\n            fontSize: 16,\n            marginBottom: 16,\n            padding: \"8px 16px\",\n            marginTop: 8,\n          }}\n        >\n          Create\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport const Frontpage = () => {\n  const [problems, setProblems] = useState<Problem[] | undefined>(undefined);\n  const [showCreateForm, setShowCreateForm] = useState(false);\n\n  const getProblems = async () => {\n    const problems = await listProblems();\n    setProblems(problems);\n  };\n\n  useEffect(() => {\n    getProblems();\n  }, []);\n\n  return (\n    <div className=\"content-wrapper\">\n      <div style={{ fontSize: 48, marginBottom: 16, fontWeight: 100 }}>\n        SLTN™\n      </div>\n\n      <div style={{ marginBottom: 32, fontWeight: 100 }}>\n        <em>Top problems, Top answers</em>\n      </div>\n\n      {!showCreateForm && (\n        <button\n          className=\"btn\"\n          style={{ fontSize: 16, padding: \"8px 16px\", marginBottom: 16 }}\n          onClick={(e) => {\n            e.preventDefault();\n            setShowCreateForm(true);\n          }}\n        >\n          Create new question\n        </button>\n      )}\n\n      {showCreateForm && <CreateForm />}\n\n      <div>\n        {problems &&\n          problems.map((problem) => (\n            <div\n              style={{\n                marginBottom: 64,\n              }}\n            >\n              <div\n                style={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  marginBottom: 16,\n                }}\n              >\n                <div\n                  style={{\n                    marginRight: 32,\n                    background: colors.gold,\n                    width: 64,\n                    height: 64,\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                    borderRadius: 32,\n                    boxShadow: \"4px 2px 0 \" + colors.jade,\n                    flexShrink: 0,\n                  }}\n                >\n                  <div style={{ paddingLeft: 4 }}>{problem.data.upvotes} ↑</div>\n                </div>\n                <div\n                  style={{\n                    fontSize: 22,\n                    paddingRight: 16,\n                  }}\n                >\n                  <Link className=\"title-link\" to={\"/problems/\" + problem.id}>\n                    {problem.data.title}\n                  </Link>\n                </div>\n              </div>\n              <div\n                style={{\n                  paddingLeft: 64 + 32,\n                  paddingRight: 32,\n                  color: \"#444\",\n                  lineHeight: 1.5,\n                  maxHeight: 64 + 32 + 16,\n                  overflow: \"hidden\",\n                  position: \"relative\",\n                }}\n              >\n                <div\n                  style={{\n                    position: \"absolute\",\n                    top: 32 + 16,\n                    background:\n                      \"linear-gradient(0deg, rgba(255,255,255,1) 0%, rgba(255,255,255,0) 100%)\",\n                    left: 0,\n                    right: 0,\n                    height: 64,\n                  }}\n                />\n                {problem.data.description}\n              </div>\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n};\n","import React, {useEffect, useState} from 'react';\nimport {useParams} from 'react-router-dom';\nimport {colors} from '../colors';\nimport {getProblem} from '../api/problem';\n\nexport interface Problem {\n  id: string;\n  data: any;\n}\n\ninterface SolutionInterface {\n  title: string;\n  description: string;\n  upvotes: number;\n}\n\nconst Solution = ({solution}: {solution: SolutionInterface}) => {\n  return (\n    <div style={{marginTop: 8, display: 'flex', flex: 1, flexDirection: 'row', alignItems: 'center'}}>\n      <div style={{marginRight: 16}}>\n        <span>⬆️</span><span>{solution.upvotes}</span>\n      </div>\n      <div>\n        <h4>{solution.title}</h4>\n        <p>{solution.description}</p>\n      </div>\n    </div>);\n};\n\nexport const ProblemView = () => {\n  const {problemId} = useParams<{problemId: string}>();\n\n  const [solutions, setSolutions] = useState<SolutionInterface[] | undefined>(undefined);\n  const [problem, setProblem] = useState<Problem | undefined>(undefined);\n\n  const getSolutions = (problemId: string) => {\n    // soon: firebase.get(problemId)\n    setSolutions([\n      {\n        title: \"Dry sponge is a happy sponge\",\n        description: \"Thank you for this question. A very important part of any sponge keeping is to keep them dry. A dry sponge is a happy sponge.\",\n        upvotes: 1337,\n      },\n      {\n        title: \"Keep them wet\",\n        description: \"As long as your sponges are constantly wet they won't get any more gross.\",\n        upvotes: -12,\n      },\n    ]);\n  };\n\n  const getSetProblem = async (problemId: string) => {\n    const problem = await getProblem(problemId);\n    setProblem(problem);\n  };\n\n  useEffect(() => {\n    getSetProblem(problemId);\n  }, [problemId]);\n\n  useEffect(() => {\n    if (problemId) {\n      // TODO: remove this setTimeout when firebase integration is merged\n      setTimeout(() =>\n        getSolutions(problemId)\n        , 1000);\n    }\n  }, [problemId]);\n\n  if (!problem) {\n    return (\n      <div className=\"content-wrapper\">\n        <h1>Loading...</h1>\n        <p>Please wait</p>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"content-wrapper\">\n        <div style={{display: 'flex', flex: 1, flexDirection: 'row', alignItems: 'center'}}>\n          <div style={{marginRight: 24, backgroundColor: colors.gold, borderRadius: 48, padding: 24, display: 'flex', flexDirection: 'row'}}>\n            <span>⬆️</span><span>{problem.data.upvotes}</span>\n          </div>\n          <div>\n            <h1>{problem.data.title}</h1>\n            <p>{problem.data.description}</p>\n          </div>\n        </div>\n\n        {solutions &&\n          <div style={{marginTop: 24}}>\n            <h2>Solutions</h2>\n            {solutions.map(solution =>\n              <Solution solution={solution} />\n            )}\n          </div>\n        }\n      </div>\n    );\n  }\n};\n","import React from \"react\"; import {BrowserRouter, Link, Route, Switch} from \"react-router-dom\";\nimport \"./App.css\";\nimport {Frontpage} from \"./components/Frontpage\";\nimport {ProblemView} from './components/ProblemView';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"body-container\">\n        <div\n          style={{\n            display: \"flex\",\n            margin: 32,\n          }}\n        >\n          <div>\n            <Link to=\"/\" className=\"header-item\">\n              Home\n            </Link>\n          </div>\n        </div>\n        <Switch>\n          <Route path=\"/\" exact={true}>\n            <Frontpage />\n          </Route>\n          <Route path=\"/problem/:problemId\" exact={true}>\n            <ProblemView />\n          </Route>\n        </Switch>\n      </div>\n    </BrowserRouter >\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}